const mongoose = require('mongoose');
const Product = require('../models/Product');

// K·∫øt n·ªëi MongoDB
mongoose.connect('mongodb://127.0.0.1:27017/bubble-tea-shop', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

async function cleanupProductPrices() {
    try {
        console.log('üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp d·ªØ li·ªáu s·∫£n ph·∫©m...');

        // 1. L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m KH√îNG ph·∫£i topping v√† c√≥ tr∆∞·ªùng price c≈©
        const nonToppingProducts = await Product.find({
            category: { $ne: 'Topping' },
            price: { $exists: true }
        });

        console.log(`üì¶ T√¨m th·∫•y ${nonToppingProducts.length} s·∫£n ph·∫©m c·∫ßn d·ªçn d·∫πp`);

        // 2. X√≥a tr∆∞·ªùng price kh·ªèi s·∫£n ph·∫©m kh√¥ng ph·∫£i topping
        const result1 = await Product.updateMany(
            { 
                category: { $ne: 'Topping' },
                price: { $exists: true }
            },
            { 
                $unset: { price: "" } 
            }
        );

        console.log(`‚úÖ ƒê√£ x√≥a tr∆∞·ªùng price c≈© kh·ªèi ${result1.modifiedCount} s·∫£n ph·∫©m`);

        // 3. ƒê·∫£m b·∫£o t·∫•t c·∫£ topping c√≥ tr∆∞·ªùng price
        const toppings = await Product.find({ category: 'Topping' });
        let toppingUpdated = 0;

        for (const topping of toppings) {
            if (!topping.price && topping.sizes && topping.sizes.length > 0) {
                // N·∫øu topping kh√¥ng c√≥ price nh∆∞ng c√≥ sizes, copy gi√° t·ª´ sizes[0]
                await Product.findByIdAndUpdate(topping._id, {
                    price: topping.sizes[0].price
                });
                toppingUpdated++;
            }
        }

        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t price cho ${toppingUpdated} topping`);

        // 4. Ki·ªÉm tra k·∫øt qu·∫£
        const finalCheck = await Product.find({});
        const productStats = {
            totalProducts: finalCheck.length,
            toppingsWithPrice: finalCheck.filter(p => p.category === 'Topping' && p.price).length,
            nonToppingsWithSizes: finalCheck.filter(p => p.category !== 'Topping' && p.sizes && p.sizes.length > 0).length,
            nonToppingsWithOldPrice: finalCheck.filter(p => p.category !== 'Topping' && p.price).length
        };

        console.log('\nüìä Th·ªëng k√™ sau khi d·ªçn d·∫πp:');
        console.log(`- T·ªïng s·∫£n ph·∫©m: ${productStats.totalProducts}`);
        console.log(`- Topping c√≥ price: ${productStats.toppingsWithPrice}`);
        console.log(`- S·∫£n ph·∫©m c√≥ sizes: ${productStats.nonToppingsWithSizes}`);
        console.log(`- S·∫£n ph·∫©m c√≤n price c≈©: ${productStats.nonToppingsWithOldPrice}`);

        if (productStats.nonToppingsWithOldPrice === 0) {
            console.log('üéâ D·ªçn d·∫πp ho√†n t·∫•t! Database ƒë√£ ƒë·ªìng b·ªô.');
        } else {
            console.log('‚ö†Ô∏è  V·∫´n c√≤n s·∫£n ph·∫©m c√≥ price c≈© c·∫ßn ki·ªÉm tra.');
        }

    } catch (error) {
        console.error('‚ùå L·ªói khi d·ªçn d·∫πp:', error);
    } finally {
        mongoose.connection.close();
        console.log('üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
    }
}

// Ch·∫°y script
cleanupProductPrices();
