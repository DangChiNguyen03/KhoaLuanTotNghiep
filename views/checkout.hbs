{{!< layouts/main}}
<div class="container">
    <h1 class="mb-4">Thanh to√°n</h1>

    {{#if success_msg}}
    <div class="alert alert-success">{{success_msg}}</div>
    {{/if}}
    {{#if error_msg}}
    <div class="alert alert-danger">{{error_msg}}</div>
    {{/if}}

    {{#if cartItems.length}}
    <div class="row">
        <div class="col-md-8">
            <h3>Chi ti·∫øt ƒë∆°n h√†ng</h3>
            <div class="table-responsive mb-4">
                <table class="table">
                    <thead>
                        <tr>
                            <th>S·∫£n ph·∫©m</th>
                            <th>T√πy ch·ªçn</th>
                            <th>Gi√°</th>
                            <th>S·ªë l∆∞·ª£ng</th>
                            <th>T·ªïng</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each cartItems}}
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <img src="{{product.image}}" alt="{{product.name}}" style="width: 50px; height: 50px; object-fit: cover;" class="me-3">
                                    <div>{{product.name}}</div>
                                </div>
                            </td>
                            <td>
                                <small>
                                    {{#if size}}
                                    <div><strong>Size:</strong> {{size}}</div>
                                    {{/if}}
                                    {{#if toppings.length}}
                                    <div><strong>Topping:</strong></div>
                                    <ul class="list-unstyled mb-2">
                                        {{#each toppingDetails}}
                                        <li class="d-flex justify-content-between align-items-center">
                                            <span>{{this.name}}</span>
                                            <span class="text-muted">
                                                {{#if this.price}}
                                                    {{formatPrice this.price}}
                                                {{else if this.sizes}}
                                                    {{formatPrice this.sizes.0.price}}
                                                {{/if}}
                                            </span>
                                        </li>
                                        {{/each}}
                                    </ul>
                                    {{/if}}
                                    {{#if sugarLevel}}
                                    <div><strong>ƒê∆∞·ªùng:</strong> {{sugarLevel}}</div>
                                    {{/if}}
                                    {{#if iceLevel}}
                                    <div><strong>ƒê√°:</strong> {{iceLevel}}</div>
                                    {{/if}}
                                </small>
                            </td>
                            <td>
                                {{#if product.sizes}}
                                    {{#if size}}
                                        {{#each product.sizes}}
                                            {{#if (eq this.size ../size)}}
                                                {{formatPrice this.price}}
                                            {{/if}}
                                        {{/each}}
                                    {{else}}
                                        {{formatPrice product.price}}
                                    {{/if}}
                                {{else}}
                                    {{formatPrice product.price}}
                                {{/if}}
                            </td>
                            <td>{{quantity}}</td>
                            <td class="item-total">
                                {{!-- T√≠nh t·ªïng ti·ªÅn item = (gi√° s·∫£n ph·∫©m theo size + t·ªïng gi√° topping) * s·ªë l∆∞·ª£ng --}}
                                {{#if product.sizes}}
                                    {{#if size}}
                                        {{#each product.sizes}}
                                            {{#if (eq this.size ../size)}}
                                                {{#if ../toppingDetails}}
                                                    {{formatPrice (multiply (add this.price (sum ../toppingDetails "price")) ../quantity)}}
                                                {{else}}
                                                    {{formatPrice (multiply this.price ../quantity)}}
                                                {{/if}}
                                            {{/if}}
                                        {{/each}}
                                    {{else}}
                                        {{#if toppingDetails}}
                                            {{formatPrice (multiply (add product.price (sum toppingDetails "price")) quantity)}}
                                        {{else}}
                                            {{formatPrice (multiply product.price quantity)}}
                                        {{/if}}
                                    {{/if}}
                                {{else}}
                                    {{#if toppingDetails}}
                                        {{formatPrice (multiply (add product.price (sum toppingDetails "price")) quantity)}}
                                    {{else}}
                                        {{formatPrice (multiply product.price quantity)}}
                                    {{/if}}
                                {{/if}}
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="4" class="text-end"><strong>T·∫°m t√≠nh:</strong></td>
                            <td><strong>{{formatPrice originalPrice}}</strong></td>
                        </tr>
                        {{#if appliedVoucher}}
                        <tr class="text-success">
                            <td colspan="4" class="text-end"><strong>Gi·∫£m gi√° ({{appliedVoucher}}):</strong></td>
                            <td><strong>-{{formatPrice discountAmount}}</strong></td>
                        </tr>
                        {{/if}}
                        <tr class="fw-bold">
                            <td colspan="4" class="text-end"><strong>T·ªïng c·ªông:</strong></td>
                            <td><strong>{{formatPrice finalPrice}}</strong></td>
                        </tr>
                    </tfoot>
                </table>
            </div>

            <!-- Voucher Selection Section -->
            <div class="card p-3 mb-3">
                <h4 class="mb-3">
                    <i class="fas fa-ticket-alt text-success me-2"></i>Voucher khuy·∫øn m√£i
                    {{#unless appliedVoucher}}
                    <button type="button" class="btn btn-outline-primary btn-sm ms-2" onclick="refreshVouchers()">
                        <i class="fas fa-sync-alt"></i> L√†m m·ªõi
                    </button>
                    {{/unless}}
                </h4>
                
                {{#if appliedVoucher}}
                <!-- Hi·ªÉn th·ªã voucher ƒë√£ √°p d·ª•ng -->
                <div class="alert alert-success d-flex justify-content-between align-items-center">
                    <div>
                        <i class="fas fa-check-circle me-2"></i>
                        <strong>Voucher ƒë√£ √°p d·ª•ng:</strong> 
                        <span class="badge bg-success ms-2">{{appliedVoucher}}</span>
                        {{#if discountAmount}}
                        <br><small class="text-success">Ti·∫øt ki·ªám: {{formatPrice discountAmount}}</small>
                        {{/if}}
                    </div>
                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeVoucher()">
                        <i class="fas fa-times"></i> B·ªè voucher
                    </button>
                </div>
                {{else}}
                <!-- Hi·ªÉn th·ªã danh s√°ch voucher ƒë·ªÉ ch·ªçn -->
                <div id="voucherCards" class="row">
                    <div class="col-12 text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">ƒêang t·∫£i...</span>
                        </div>
                        <p class="mt-2">ƒêang t·∫£i danh s√°ch voucher...</p>
                    </div>
                </div>
                {{/if}}
            </div>
        </div>
        <div class="col-md-4">
            <h3>Th√¥ng tin thanh to√°n</h3>
            <div class="card p-3">
                <p><strong>H·ªç t√™n:</strong> {{user.name}}</p>
                <p><strong>Email:</strong> {{user.email}}</p>
                <form method="POST" action="/cart/checkout" id="checkoutForm">
                    <div class="mb-3">
                        <label for="paymentMethod" class="form-label">Ph∆∞∆°ng th·ª©c thanh to√°n</label>
                        <select class="form-select" id="paymentMethod" name="paymentMethod" required onchange="togglePaymentDetails()">
                            <option value="cash">üíµ Ti·ªÅn m·∫∑t</option>
                            <option value="vnpay">üîµ VNPay</option>
                        </select>
                    </div>

                    <!-- Ph·∫ßn ti·ªÅn m·∫∑t -->
                    <div id="cashDetails" style="display: block;">
                        <div class="mb-3">
                            <label for="cashAmount" class="form-label">S·ªë ti·ªÅn kh√°ch ƒë∆∞a (VNƒê)</label>
                            <input type="number" class="form-control" id="cashAmount" name="cashAmount" min="{{finalPrice}}" step="1000">
                        </div>
                        <div id="changeAmount" class="mb-3"></div>
                    </div>



                    <!-- Ph·∫ßn VNPay -->
                    <div id="vnpayDetails" style="display: none;">
                        <div class="text-center p-3 bg-light rounded">
                            <div class="mb-3">
                                <i class="fas fa-credit-card text-blue" style="font-size: 2rem;"></i>
                            </div>
                            <h5 class="text-blue mb-3">Thanh to√°n VNPay</h5>
                            <p class="text-muted mb-3">B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn c·ªïng thanh to√°n VNPay ƒë·ªÉ ho√†n t·∫•t thanh to√°n</p>
                            <div class="alert alert-success">
                                <small>
                                    <i class="fas fa-shield-alt me-1"></i>
                                    H·ªó tr·ª£ thanh to√°n qua ATM, Internet Banking, Visa/MasterCard
                                </small>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary w-100">X√°c nh·∫≠n thanh to√°n</button>
                </form>
            </div>
        </div>
    </div>
    {{else}}
    <div class="text-center">
        <p class="mb-4">Gi·ªè h√†ng tr·ªëng</p>
        <a href="/products" class="btn btn-primary">Mua s·∫Øm ngay</a>
    </div>
    {{/if}}
</div>

<script>
function togglePaymentDetails() {
    const paymentMethodElement = document.getElementById('paymentMethod');
    if (!paymentMethodElement) {
        return;
    }
    
    const paymentMethod = paymentMethodElement.value;
    const cashDetails = document.getElementById('cashDetails');
    const vnpayDetails = document.getElementById('vnpayDetails');

    // Hide all details first
    if (cashDetails) cashDetails.style.display = 'none';
    if (vnpayDetails) vnpayDetails.style.display = 'none';

    // Show relevant details
    if (paymentMethod === 'cash' && cashDetails) {
        cashDetails.style.display = 'block';
    } else if (paymentMethod === 'vnpay' && vnpayDetails) {
        vnpayDetails.style.display = 'block';
    }
}

document.addEventListener('DOMContentLoaded', function() {
    togglePaymentDetails();
    loadAvailableVouchers();

    const cashAmountInput = document.getElementById('cashAmount');
    const finalPrice = {{finalPrice}};
    const changeAmountDiv = document.getElementById('changeAmount');

    cashAmountInput.addEventListener('input', function() {
        const cash = parseInt(this.value) || 0;
        const change = cash - finalPrice;
        if (change >= 0) {
            changeAmountDiv.innerHTML = `<strong>Ti·ªÅn th·ª´a:</strong> ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(change)}`;
        } else {
            changeAmountDiv.innerHTML = `<span class="text-danger">S·ªë ti·ªÅn kh√¥ng ƒë·ªß</span>`;
        }
    });

    document.getElementById('checkoutForm').addEventListener('submit', function(e) {
        const paymentMethod = document.getElementById('paymentMethod').value;
        
        if (paymentMethod === 'cash') {
            const cash = parseInt(cashAmountInput.value) || 0;
            if (cash < finalPrice) {
                e.preventDefault();
                alert('S·ªë ti·ªÅn kh√°ch ƒë∆∞a kh√¥ng ƒë·ªß ƒë·ªÉ thanh to√°n!');
                return;
            }
        } else if (paymentMethod === 'vnpay') {
            e.preventDefault();
            handleVNPayPayment();
            return;
        }
    });
});


// VNPay Payment Handler
async function handleVNPayPayment() {
    try {
        // Show loading
        const submitBtn = document.querySelector('#checkoutForm button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>ƒêang x·ª≠ l√Ω...';
        submitBtn.disabled = true;

        // First, create the order
        const checkoutResponse = await fetch('/cart/checkout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
                paymentMethod: 'vnpay',
                voucherCode: selectedVoucher ? selectedVoucher.code : ''
            })
        });

        // Try to parse JSON response first
        let checkoutData;
        
        try {
            // Check if response is actually JSON
            const contentType = checkoutResponse.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('Response is not JSON, Content-Type: ' + contentType);
            }
            
            checkoutData = await checkoutResponse.json();
            
            if (!checkoutData.success) {
                throw new Error(checkoutData.message || 'Failed to create order');
            }
        } catch (e) {
            console.error('‚ùå Failed to parse VNPay checkout response as JSON:', e);
            
            // Fallback to mock order for compatibility
            const mockOrderId = 'ORDER_' + Date.now();
            checkoutData = { success: true, orderId: mockOrderId };
        }

        // Create VNPay payment
        const paymentResponse = await fetch('/payment/vnpay/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                orderId: checkoutData.orderId
            })
        });

        const paymentData = await paymentResponse.json();
        
        if (!paymentData.success) {
            throw new Error(paymentData.message || 'Failed to create VNPay payment');
        }

        // Redirect to VNPay
        window.location.href = paymentData.paymentUrl;

    } catch (error) {
        console.error('VNPay payment error:', error);
        alert('C√≥ l·ªói x·∫£y ra khi t·∫°o thanh to√°n VNPay: ' + error.message);
        
        // Reset button
        const submitBtn = document.querySelector('#checkoutForm button[type="submit"]');
        submitBtn.innerHTML = 'X√°c nh·∫≠n thanh to√°n';
        submitBtn.disabled = false;
    }
}

// Voucher management functions
let selectedVoucher = null;

async function loadAvailableVouchers() {
    try {
        const response = await fetch('/cart/available-vouchers');
        
        // Check if response is JSON or HTML (redirect)
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            // Not JSON, probably redirected to login
            document.getElementById('voucherCards').innerHTML = `
                <div class="col-12 text-center text-warning">
                    <i class="fas fa-info-circle"></i>
                    <p>Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem voucher</p>
                </div>
            `;
            return;
        }
        
        const data = await response.json();
        displayVouchers(data.vouchers);
    } catch (error) {
        console.error('Error loading vouchers:', error);
        document.getElementById('voucherCards').innerHTML = `
            <div class="col-12 text-center text-danger">
                <i class="fas fa-exclamation-triangle"></i>
                <p>Kh√¥ng th·ªÉ t·∫£i danh s√°ch voucher</p>
            </div>
        `;
    }
}

function displayVouchers(vouchers) {
    const container = document.getElementById('voucherCards');
    
    if (vouchers.length === 0) {
        container.innerHTML = `
            <div class="col-12 text-center text-muted">
                <i class="fas fa-ticket-alt fa-2x mb-2"></i>
                <p>Kh√¥ng c√≥ voucher kh·∫£ d·ª•ng</p>
            </div>
        `;
        return;
    }

    let html = '';
    vouchers.forEach(voucher => {
        const isApplicable = voucher.isApplicable;
        const cardClass = isApplicable ? 'border-success' : 'border-secondary';
        const badgeClass = isApplicable ? 'bg-success' : 'bg-secondary';
        const buttonClass = isApplicable ? 'btn-success' : 'btn-secondary';
        const disabled = isApplicable ? '' : 'disabled';

        // Format discount display
        let discountText = '';
        if (voucher.discountType === 'percentage') {
            discountText = `Gi·∫£m ${voucher.discountValue}%`;
        } else if (voucher.discountType === 'fixed_amount') {
            discountText = `Gi·∫£m ${new Intl.NumberFormat('vi-VN').format(voucher.discountValue)}ƒë`;
        } else if (voucher.discountType === 'special_day_fixed_price') {
            discountText = `Gi√° c·ªë ƒë·ªãnh ${new Intl.NumberFormat('vi-VN').format(voucher.fixedPrice)}ƒë`;
        }

        // Format time conditions
        let timeText = '';
        if (voucher.startTime !== null && voucher.startTime !== undefined && 
            voucher.endTime !== null && voucher.endTime !== undefined) {
            timeText = `<small class="text-muted"><i class="fas fa-clock"></i> ${voucher.startTime}h - ${voucher.endTime}h</small>`;
        } else {
            timeText = `<small class="text-muted"><i class="fas fa-clock"></i> C·∫£ ng√†y</small>`;
        }

        html += `
            <div class="col-md-6 mb-3">
                <div class="card h-100 ${cardClass}" style="cursor: ${isApplicable ? 'pointer' : 'not-allowed'};">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h6 class="card-title mb-0">
                                <span class="badge ${badgeClass}">${voucher.code}</span>
                            </h6>
                            ${isApplicable && voucher.potentialDiscount > 0 ? 
                                `<small class="text-success fw-bold">-${new Intl.NumberFormat('vi-VN').format(voucher.potentialDiscount)}ƒë</small>` : 
                                ''
                            }
                        </div>
                        <p class="card-text small mb-2">${voucher.description}</p>
                        <div class="mb-2">
                            <span class="badge bg-primary">${discountText}</span>
                            ${voucher.applicableCategory ? `<span class="badge bg-info">${voucher.applicableCategory}</span>` : ''}
                        </div>
                        ${timeText}
                        ${!isApplicable ? `<small class="text-danger"><i class="fas fa-info-circle"></i> ${voucher.reason}</small>` : ''}
                    </div>
                    <div class="card-footer">
                        <button class="btn ${buttonClass} btn-sm w-100" ${disabled} 
                                onclick="selectVoucher('${voucher.code}', this)" 
                                data-voucher-code="${voucher.code}">
                            ${isApplicable ? 'Ch·ªçn voucher' : 'Kh√¥ng kh·∫£ d·ª•ng'}
                        </button>
                    </div>
                </div>
            </div>
        `;
    });

    container.innerHTML = html;
}

async function selectVoucher(voucherCode, buttonElement) {
    // Reset previous selection
    document.querySelectorAll('[data-voucher-code]').forEach(btn => {
        if (btn.classList.contains('btn-warning')) {
            btn.classList.remove('btn-warning');
            btn.classList.add('btn-success');
            btn.textContent = 'Ch·ªçn voucher';
        }
    });

    // Apply new selection
    buttonElement.classList.remove('btn-success');
    buttonElement.classList.add('btn-warning');
    buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang √°p d·ª•ng...';

    try {
        const response = await fetch('/cart/apply-voucher', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ voucherCode: voucherCode })
        });

        const data = await response.json();

        if (response.ok) {
            selectedVoucher = voucherCode;
            buttonElement.innerHTML = '<i class="fas fa-check"></i> ƒê√£ ch·ªçn';
            
            // Show success message and reload page to update prices
            alert('√Åp d·ª•ng voucher th√†nh c√¥ng!');
            window.location.reload();
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        console.error('Error applying voucher:', error);
        alert('L·ªói khi √°p d·ª•ng voucher: ' + error.message);
        
        // Reset button
        buttonElement.classList.remove('btn-warning');
        buttonElement.classList.add('btn-success');
        buttonElement.textContent = 'Ch·ªçn voucher';
    }
}

function refreshVouchers() {
    document.getElementById('voucherCards').innerHTML = `
        <div class="col-12 text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">ƒêang t·∫£i...</span>
            </div>
            <p class="mt-2">ƒêang l√†m m·ªõi danh s√°ch voucher...</p>
        </div>
    `;
    loadAvailableVouchers();
}

async function removeVoucher() {
    if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën b·ªè voucher n√†y kh√¥ng?')) {
        return;
    }

    try {
        const response = await fetch('/cart/remove-voucher', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });

        const data = await response.json();

        if (response.ok) {
            alert('ƒê√£ b·ªè voucher th√†nh c√¥ng!');
            window.location.reload();
        } else {
            throw new Error(data.message || 'Kh√¥ng th·ªÉ b·ªè voucher');
        }
    } catch (error) {
        console.error('Error removing voucher:', error);
        alert('L·ªói khi b·ªè voucher: ' + error.message);
    }
}
</script>

<style>
.text-blue {
    color: #1e88e5 !important;
}
.bg-blue {
    background-color: #1e88e5 !important;
}
</style>